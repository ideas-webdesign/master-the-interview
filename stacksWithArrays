// Stacks and Queues - Linear Data Structure
// Transverse data one by one
// Have a lot of methods to access on data
// Stacks LIFO VS Queues FIFO
// Stacks lookup O(n) | pop O(1) | push O(1) | peek O(1) (Main Methods)
// Queues lookup O(n) | enqueue O(1) | dequeue O(1) | peek O(1)

// Stacks (ex: browser history)
// Arrays or Linked Lists

// google
// udemy
// youtube

// using Arrays (chaging from linkedLists)
class Node {
  constructor(value){
    this.value = value;
    this.next = null;
  }
}

class Stack {
  constructor(){
    // no need for length because its built-in
    this.array = []
    /* all removed
      this.top = null; 
      this.bottom = null;
      this.length = 0;
    */
  }
  peek() {
    return this.array[this.array.length-1]
  }
  push(value){
    this.array.push(value)
    return this;
    /* all removed
    const newNode = new Node(value);
    if (this.length === 0) {
      this.top = newNode;
      this.bottom = newNode;
    } else {
      const holdingPointer = this.top;
      this.top = newNode;
      this.top.next = holdingPointer;
    }
    this.length++;
    return this; 
    */
  }
  pop(){
    this.array.pop()
    return this;
    /* removed all
    if (!this.top) {
      return null;
    }
    if (this.top === this.bottom) {
      this.bottom = null;
    }
    const holdingPointer = this.top;
    this.top = this.top.next;
    this.length--;
    return this; */
  }
  //isEmpty
}

const myStack = new Stack();
myStack.peek();
myStack.push('google');
myStack.push('udemy');
myStack.push('discord');
myStack.peek();
myStack.pop();
